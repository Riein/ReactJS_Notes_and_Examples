Reasons to use ReactJS: React.js is a JavaScript library
	1) It’s fast, can handle complex updates and feel quick/responsive
	2) It’s modular, write many smaller, reusable files.
	3) It’s scalable, large programs that display a lot of changing data are best.
	4) It’s flexible, doesn’t have to just be used for web apps
	5) It’s popular, lots of support behind it.
React JSX Basics
	1) JSX stands for JavaScript Extensions
		Ex. var myArticle = <article>text goes here</article>;
	2) It can have attributes like <a href=”http://yahoo.com”> </a>
	3) JSX expression must have exactly ONE outermost element.
	4) ReactDOM - name of a JS lib that contains several React-specific methods that deal with the Document Object Model (DOM)
	5) ReactDOM.render only updates DOM elements that have changed.
	6) Any code in between tags of a JSX element will be read as JSX, meaning that numbers are not added, like HTML.
	7) Use curly braces to treat any JSX as regular JavaScript.
 
Components
	1) React applications are made out of components
	2) Methods returned by react-dom are for interacting with the DOM such as ReactDOM.render.
	3) Methods returned by react are for React purposes such as creating components or writing JSX elements.
	4) Component - small, reusable chunk of code that is responsible for one job, which often involves rendering HTML.
	5) Every component must come from a component class.
	6) React.createClass will create a component class and should be stored in a variable.
	7) Component class variable names must begin with capital letters. 
	8) React components are written in JSX elements to become component instances and uses capitalization to differenitate between HTML elements or component elements.
	9) Whenever you make a React component instance, it inherits all of the properties on it's class's instructions object. This means the render function inside is called when you render using ReactDOM.render.
	
