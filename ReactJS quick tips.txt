Reasons to use ReactJS: React.js is a JavaScript library
	1) It’s fast, can handle complex updates and feel quick/responsive
	2) It’s modular, write many smaller, reusable files.
	3) It’s scalable, large programs that display a lot of changing data are best.
	4) It’s flexible, doesn’t have to just be used for web apps
	5) It’s popular, lots of support behind it.
React JSX Basics
	1) JSX stands for JavaScript Extensions
		Ex. var myArticle = <article>text goes here</article>;
	2) It can have attributes like <a href=”http://yahoo.com”> </a>
	3) JSX expression must have exactly ONE outermost element.
	4) ReactDOM - name of a JS lib that contains several React-specific methods that deal with the Document Object Model (DOM)
	5) ReactDOM.render only updates DOM elements that have changed.
	6) Any code in between tags of a JSX element will be read as JSX, meaning that numbers are not added, like HTML.
	7) Use curly braces to treat any JSX as regular JavaScript.
 
Components
	1) React applications are made out of components
	2) Methods returned by react-dom are for interacting with the DOM such as ReactDOM.render.
	3) Methods returned by react are for React purposes such as creating components or writing JSX elements.
	4) Component - small, reusable chunk of code that is responsible for one job, which often involves rendering HTML.
	5) Every component must come from a component class.
	6) React.createClass will create a component class and should be stored in a variable.
	7) Component class variable names must begin with capital letters. 
	8) React components are written in JSX elements to become component instances and uses capitalization to differenitate between HTML elements or component elements.
	9) Whenever you make a React component instance, it inherits all of the properties on it's class's instructions object. This means the render function inside is called when you render using ReactDOM.render.
	10) Can have functions within a component class aside from render.
		Ex. talk: function () { return <h1>I'm talking.</h1>;};
	
Component Interaction
	1) If you want to use a component within another component, need to use modules.export = <class_name>
		Ex. modules.export = List;
	2) To use a component class, need to require it with the path of where that file is.
		Ex. var List = require('./List');
	3) A passed in component can be used similar to how ReactDOM render uses a component.
		Ex. render: function() { return <List />;}

Component Props
	1) Every component has a props object. This contains information passed into that component.
		Ex. <MyComponent foo="bar" />
		Ex2. <Example array={["this", "is", "an array"]} />
	2) 	Accessed by using this.props and can be specified by the item passed in.
		Ex. {this.props.firstName}
	3) Props can be used to check if they contain specific information and checked with an if statement.
		Ex. if (this.props.name == 'Steve') {}
	4) Event handlers can be passed to components. Create a function within one component and pass as a prop value.
		Ex. <Button onClick={this.handleClick} /> could then be used in the Button class as <button onClick={this.props.onClick}>;
	5) Every component's props object has a property called 'children' which is found with this.props.children
	6) If component has more than one child between it's JSX tags, props will return an array, otherwise it will return only one child.
		Ex. if (this.props.children instanceof Array) {}
	
